#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef ZYWEBGAMEKIT_SWIFT_H
#define ZYWEBGAMEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZYWebGameKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif
















SWIFT_CLASS_NAMED("ZYWebGameKit")
@interface ZYWebGameKit : NSObject
/// 初始化方法（必接）
/// \param appKey 服务器给的key，对应运营给到的参数appkey
///
/// \param appId 对应运营给的appid
///
/// \param channelId 渠道id，默认90035
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)initWithAppKey:(NSString * _Nonnull)appKey appId:(NSString * _Nonnull)appId channelId:(NSString * _Nonnull)channelId success:(void (^ _Nonnull)(BOOL))success fail:(void (^ _Nonnull)(void))fail SWIFT_METHOD_FAMILY(none);
/// 非参数初始化方法,兼容国内外服务器使用（两个初始化方法二选一）
/// \param appKey 服务器给的key，对应运营给到的参数appkey
///
/// \param appId 对应运营给的appid
///
/// \param channelId 渠道id，默认90035
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)initWithSuccess:(void (^ _Nonnull)(BOOL))success fail:(void (^ _Nonnull)(void))fail SWIFT_METHOD_FAMILY(none);
/// 登录
/// \param success 登录成功回调 userId和token
///
/// \param fail 登录失败回调
///
+ (void)loginWithSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))success fail:(void (^ _Nonnull)(void))fail SWIFT_DEPRECATED_MSG("接口已经废弃，请使用‘loginOrLogoutWithLoginSuccess’");
/// 拉起登录，同时监听登录退出的成功状态，如果接入switchUser和login这个两个方法就不用接loginOrLogout方法
/// \param loginSuccess 登录成功回调
///
/// \param loginFail 登录失败回调
///
/// \param logoutSuccess 监听登出成功回调
///
/// \param logoutFail 登出失败回调
///
///
/// returns:
/// –
+ (void)loginOrLogoutWithLoginSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))loginSuccess loginFail:(void (^ _Nonnull)(void))loginFail logoutSuccess:(void (^ _Nonnull)(void))logoutSuccess logoutFail:(void (^ _Nonnull)(void))logoutFail;
/// 切换用户
/// \param success 切换用户成功
///
/// \param fail 切换用户失败
///
///
/// returns:
/// –
+ (void)switchUserWithSuccess:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail SWIFT_DEPRECATED_MSG("接口已经废弃，请不要再使用");
/// 游戏主动调退出
/// \param success 登出成功
///
/// \param fail 登出失败
///
+ (void)logoutWithSuccess:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 绑定区服
/// \param gameZoneId 游戏区服ID
///
/// \param gameZoneName 游戏区服名称
///
/// \param guildName 公会名称
///
/// \param roleId 角色ID
///
/// \param level 角色等级
///
/// \param roleName 角色名称
///
/// \param vipLevel 角色VIP等级
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)bindWithGameZoneId:(NSString * _Nonnull)gameZoneId gameZoneName:(NSString * _Nonnull)gameZoneName guildName:(NSString * _Nonnull)guildName roleId:(NSString * _Nonnull)roleId level:(NSString * _Nonnull)level roleName:(NSString * _Nonnull)roleName vipLevel:(NSString * _Nonnull)vipLevel success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 提交角色信息
/// \param gameZoneId 游戏区服ID
///
/// \param gameZoneName 游戏区服名称
///
/// \param guildName 公会名称
///
/// \param roleBalance 金币
///
/// \param roleId 角色ID
///
/// \param level 角色等级
///
/// \param roleName 角色名字
///
/// \param vipLevel 角色VIP等级
///
/// \param submitType 提交角色信息类型1: 进入游戏   2: 创建角色    3: 角色升级     4: 退出游戏
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)submitWithGameZoneId:(NSString * _Nonnull)gameZoneId gameZoneName:(NSString * _Nonnull)gameZoneName guildName:(NSString * _Nonnull)guildName roleBalance:(NSString * _Nonnull)roleBalance roleId:(NSString * _Nonnull)roleId level:(NSString * _Nonnull)level roleName:(NSString * _Nonnull)roleName vipLevel:(NSString * _Nonnull)vipLevel submitType:(NSString * _Nonnull)submitType success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 购买商品
/// \param goodsPrice 单位为元保留小数点后两位
///
/// \param productId 虚拟商品在APP Store中的ID
///
/// \param gameOrderId 订单ID
///
/// \param gameZoneId 游戏区服ID
///
/// \param roleId 角色ID
///
/// \param level 角色等级
///
/// \param notifyUrl 回调地址
///
/// \param roleName 角色名字
///
/// \param cpPrivateInfo 透传参数，给渠道预留的参数，如果不用请传@””
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)shopWithGoodsPrice:(NSString * _Nonnull)goodsPrice productId:(NSString * _Nonnull)productId gameOrderId:(NSString * _Nonnull)gameOrderId gameZoneId:(NSString * _Nonnull)gameZoneId roleId:(NSString * _Nonnull)roleId level:(NSString * _Nonnull)level notifyUrl:(NSString * _Nonnull)notifyUrl roleName:(NSString * _Nonnull)roleName cpPrivateInfo:(NSString * _Nonnull)cpPrivateInfo success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// \param otherId 平台ID
///
/// \param email 邮箱
///
/// \param name 平台上的名字
///
/// \param loginType 登录类型
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
///
/// returns:
/// –
+ (void)otherLoginWithOtherId:(NSString * _Nonnull)otherId email:(NSString * _Nonnull)email name:(NSString * _Nonnull)name loginType:(NSString * _Nonnull)loginType;
/// 显示悬浮按钮
+ (void)show;
/// 隐藏悬浮按钮
+ (void)hidden;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
#ifndef ZYWEBGAMEKIT_SWIFT_H
#define ZYWEBGAMEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZYWebGameKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif
















SWIFT_CLASS_NAMED("ZYWebGameKit")
@interface ZYWebGameKit : NSObject
/// 初始化方法（必接）
/// \param appKey 服务器给的key，对应运营给到的参数appkey
///
/// \param appId 对应运营给的appid
///
/// \param channelId 渠道id，默认90035
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)initWithAppKey:(NSString * _Nonnull)appKey appId:(NSString * _Nonnull)appId channelId:(NSString * _Nonnull)channelId success:(void (^ _Nonnull)(BOOL))success fail:(void (^ _Nonnull)(void))fail SWIFT_METHOD_FAMILY(none);
/// 非参数初始化方法,兼容国内外服务器使用（两个初始化方法二选一）
/// \param appKey 服务器给的key，对应运营给到的参数appkey
///
/// \param appId 对应运营给的appid
///
/// \param channelId 渠道id，默认90035
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)initWithSuccess:(void (^ _Nonnull)(BOOL))success fail:(void (^ _Nonnull)(void))fail SWIFT_METHOD_FAMILY(none);
/// 登录
/// \param success 登录成功回调 userId和token
///
/// \param fail 登录失败回调
///
+ (void)loginWithSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))success fail:(void (^ _Nonnull)(void))fail SWIFT_DEPRECATED_MSG("接口已经废弃，请使用‘loginOrLogoutWithLoginSuccess’");
/// 拉起登录，同时监听登录退出的成功状态，如果接入switchUser和login这个两个方法就不用接loginOrLogout方法
/// \param loginSuccess 登录成功回调
///
/// \param loginFail 登录失败回调
///
/// \param logoutSuccess 监听登出成功回调
///
/// \param logoutFail 登出失败回调
///
///
/// returns:
/// –
+ (void)loginOrLogoutWithLoginSuccess:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))loginSuccess loginFail:(void (^ _Nonnull)(void))loginFail logoutSuccess:(void (^ _Nonnull)(void))logoutSuccess logoutFail:(void (^ _Nonnull)(void))logoutFail;
/// 切换用户
/// \param success 切换用户成功
///
/// \param fail 切换用户失败
///
///
/// returns:
/// –
+ (void)switchUserWithSuccess:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail SWIFT_DEPRECATED_MSG("接口已经废弃，请不要再使用");
/// 游戏主动调退出
/// \param success 登出成功
///
/// \param fail 登出失败
///
+ (void)logoutWithSuccess:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 绑定区服
/// \param gameZoneId 游戏区服ID
///
/// \param gameZoneName 游戏区服名称
///
/// \param guildName 公会名称
///
/// \param roleId 角色ID
///
/// \param level 角色等级
///
/// \param roleName 角色名称
///
/// \param vipLevel 角色VIP等级
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)bindWithGameZoneId:(NSString * _Nonnull)gameZoneId gameZoneName:(NSString * _Nonnull)gameZoneName guildName:(NSString * _Nonnull)guildName roleId:(NSString * _Nonnull)roleId level:(NSString * _Nonnull)level roleName:(NSString * _Nonnull)roleName vipLevel:(NSString * _Nonnull)vipLevel success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 提交角色信息
/// \param gameZoneId 游戏区服ID
///
/// \param gameZoneName 游戏区服名称
///
/// \param guildName 公会名称
///
/// \param roleBalance 金币
///
/// \param roleId 角色ID
///
/// \param level 角色等级
///
/// \param roleName 角色名字
///
/// \param vipLevel 角色VIP等级
///
/// \param submitType 提交角色信息类型1: 进入游戏   2: 创建角色    3: 角色升级     4: 退出游戏
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)submitWithGameZoneId:(NSString * _Nonnull)gameZoneId gameZoneName:(NSString * _Nonnull)gameZoneName guildName:(NSString * _Nonnull)guildName roleBalance:(NSString * _Nonnull)roleBalance roleId:(NSString * _Nonnull)roleId level:(NSString * _Nonnull)level roleName:(NSString * _Nonnull)roleName vipLevel:(NSString * _Nonnull)vipLevel submitType:(NSString * _Nonnull)submitType success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// 购买商品
/// \param goodsPrice 单位为元保留小数点后两位
///
/// \param productId 虚拟商品在APP Store中的ID
///
/// \param gameOrderId 订单ID
///
/// \param gameZoneId 游戏区服ID
///
/// \param roleId 角色ID
///
/// \param level 角色等级
///
/// \param notifyUrl 回调地址
///
/// \param roleName 角色名字
///
/// \param cpPrivateInfo 透传参数，给渠道预留的参数，如果不用请传@””
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
+ (void)shopWithGoodsPrice:(NSString * _Nonnull)goodsPrice productId:(NSString * _Nonnull)productId gameOrderId:(NSString * _Nonnull)gameOrderId gameZoneId:(NSString * _Nonnull)gameZoneId roleId:(NSString * _Nonnull)roleId level:(NSString * _Nonnull)level notifyUrl:(NSString * _Nonnull)notifyUrl roleName:(NSString * _Nonnull)roleName cpPrivateInfo:(NSString * _Nonnull)cpPrivateInfo success:(void (^ _Nonnull)(void))success fail:(void (^ _Nonnull)(void))fail;
/// \param otherId 平台ID
///
/// \param email 邮箱
///
/// \param name 平台上的名字
///
/// \param loginType 登录类型
///
/// \param success 成功回调
///
/// \param fail 失败回调
///
///
/// returns:
/// –
+ (void)otherLoginWithOtherId:(NSString * _Nonnull)otherId email:(NSString * _Nonnull)email name:(NSString * _Nonnull)name loginType:(NSString * _Nonnull)loginType;
/// 显示悬浮按钮
+ (void)show;
/// 隐藏悬浮按钮
+ (void)hidden;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
